# Generated by Django 3.0.8 on 2020-08-19 08:24

import IRIB_FollowUp.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2000, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Session',
                'verbose_name_plural': 'Sessions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2000, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Supervisor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2000, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Supervisor Unit',
                'verbose_name_plural': 'Supervisor Units',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.IntegerField(blank=True, null=True, verbose_name='User ID')),
                ('access_level', models.CharField(choices=[('user', 'User'), ('secretary', 'Secretary')], default='user', max_length=20, verbose_name='Access Level')),
                ('_title', models.CharField(choices=[('Mr', 'Mr'), ('Mrs', 'Mrs')], default='Mr', max_length=100, verbose_name='Title')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('supervisor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='IRIB_FollowUp.Supervisor', verbose_name='Supervisor Unit')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Enactment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(default=1, verbose_name='Code')),
                ('description', models.TextField(blank=True, max_length=4000, null=True, verbose_name='Description')),
                ('date', models.DateField(default=IRIB_FollowUp.models.set_now, verbose_name='Assignment Date')),
                ('follow_grade', models.CharField(default=1, max_length=100, verbose_name='Follow Grade')),
                ('result', models.TextField(blank=True, max_length=4000, null=True, verbose_name='Result')),
                ('review_date', models.DateField(default=IRIB_FollowUp.models.set_now, verbose_name='Review Date')),
                ('assigner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Task Assigner')),
                ('first_actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='first_actor', to=settings.AUTH_USER_MODEL, verbose_name='First Actor')),
                ('second_actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='second_actor', to=settings.AUTH_USER_MODEL, verbose_name='Second Actor')),
                ('session', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='IRIB_FollowUp.Session', verbose_name='Session')),
                ('subject', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='IRIB_FollowUp.Subject', verbose_name='Subject')),
            ],
            options={
                'verbose_name': 'Enactment',
                'verbose_name_plural': 'Enactments',
                'ordering': ['-review_date', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Description')),
                ('file', models.FileField(upload_to=IRIB_FollowUp.models.Attachment.directory_path, verbose_name='File')),
                ('enactment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IRIB_FollowUp.Enactment', verbose_name='Enactment')),
            ],
            options={
                'verbose_name': 'Attachment',
                'verbose_name_plural': 'Attachments',
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='Attendant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='IRIB_FollowUp.Session', verbose_name='Session')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Attendant',
                'verbose_name_plural': 'Attendants',
                'ordering': ['session__name', 'user__last_name', 'user__first_name'],
                'unique_together': {('session', 'user')},
            },
        ),
    ]
